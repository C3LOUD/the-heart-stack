// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO
  todo (content)
VALUES
  (?) RETURNING id, content, is_finished, created_at
`

func (q *Queries) CreateTodo(ctx context.Context, content string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, content)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsFinished,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM
  todo
WHERE
  id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT
  id, content, is_finished, created_at
FROM
  todo
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsFinished,
		&i.CreatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT
  id, content, is_finished, created_at
FROM
  todo
ORDER BY
  created_at
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsFinished,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnfinishedTodoCount = `-- name: GetUnfinishedTodoCount :one
SELECT
  count(*)
FROM
  todo
`

func (q *Queries) GetUnfinishedTodoCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnfinishedTodoCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const toggleTodo = `-- name: ToggleTodo :exec
UPDATE
  todo
SET
  is_finished = ?
WHERE
  id = ?
`

type ToggleTodoParams struct {
	IsFinished sql.NullBool
	ID         int64
}

func (q *Queries) ToggleTodo(ctx context.Context, arg ToggleTodoParams) error {
	_, err := q.db.ExecContext(ctx, toggleTodo, arg.IsFinished, arg.ID)
	return err
}
